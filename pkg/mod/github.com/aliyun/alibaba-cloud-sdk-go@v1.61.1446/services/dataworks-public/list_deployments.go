package dataworks_public

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListDeployments invokes the dataworks_public.ListDeployments API synchronously
func (client *Client) ListDeployments(request *ListDeploymentsRequest) (response *ListDeploymentsResponse, err error) {
	response = CreateListDeploymentsResponse()
	err = client.DoAction(request, response)
	return
}

// ListDeploymentsWithChan invokes the dataworks_public.ListDeployments API asynchronously
func (client *Client) ListDeploymentsWithChan(request *ListDeploymentsRequest) (<-chan *ListDeploymentsResponse, <-chan error) {
	responseChan := make(chan *ListDeploymentsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListDeployments(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListDeploymentsWithCallback invokes the dataworks_public.ListDeployments API asynchronously
func (client *Client) ListDeploymentsWithCallback(request *ListDeploymentsRequest, callback func(response *ListDeploymentsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListDeploymentsResponse
		var err error
		defer close(result)
		response, err = client.ListDeployments(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListDeploymentsRequest is the request struct for api ListDeployments
type ListDeploymentsRequest struct {
	*requests.RpcRequest
	Creator           string           `position:"Body" name:"Creator"`
	EndCreateTime     requests.Integer `position:"Body" name:"EndCreateTime"`
	ProjectIdentifier string           `position:"Body" name:"ProjectIdentifier"`
	PageNumber        requests.Integer `position:"Body" name:"PageNumber"`
	Executor          string           `position:"Body" name:"Executor"`
	PageSize          requests.Integer `position:"Body" name:"PageSize"`
	EndExecuteTime    requests.Integer `position:"Body" name:"EndExecuteTime"`
	Keyword           string           `position:"Body" name:"Keyword"`
	ProjectId         requests.Integer `position:"Body" name:"ProjectId"`
	Status            requests.Integer `position:"Body" name:"Status"`
}

// ListDeploymentsResponse is the response struct for api ListDeployments
type ListDeploymentsResponse struct {
	*responses.BaseResponse
	RequestId string                `json:"RequestId" xml:"RequestId"`
	Data      DataInListDeployments `json:"Data" xml:"Data"`
}

// CreateListDeploymentsRequest creates a request to invoke ListDeployments API
func CreateListDeploymentsRequest() (request *ListDeploymentsRequest) {
	request = &ListDeploymentsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("dataworks-public", "2020-05-18", "ListDeployments", "", "")
	request.Method = requests.POST
	return
}

// CreateListDeploymentsResponse creates a response to parse from ListDeployments response
func CreateListDeploymentsResponse() (response *ListDeploymentsResponse) {
	response = &ListDeploymentsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
