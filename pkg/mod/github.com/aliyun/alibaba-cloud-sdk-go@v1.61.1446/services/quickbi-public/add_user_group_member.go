package quickbi_public

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// AddUserGroupMember invokes the quickbi_public.AddUserGroupMember API synchronously
func (client *Client) AddUserGroupMember(request *AddUserGroupMemberRequest) (response *AddUserGroupMemberResponse, err error) {
	response = CreateAddUserGroupMemberResponse()
	err = client.DoAction(request, response)
	return
}

// AddUserGroupMemberWithChan invokes the quickbi_public.AddUserGroupMember API asynchronously
func (client *Client) AddUserGroupMemberWithChan(request *AddUserGroupMemberRequest) (<-chan *AddUserGroupMemberResponse, <-chan error) {
	responseChan := make(chan *AddUserGroupMemberResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AddUserGroupMember(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// AddUserGroupMemberWithCallback invokes the quickbi_public.AddUserGroupMember API asynchronously
func (client *Client) AddUserGroupMemberWithCallback(request *AddUserGroupMemberRequest, callback func(response *AddUserGroupMemberResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AddUserGroupMemberResponse
		var err error
		defer close(result)
		response, err = client.AddUserGroupMember(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// AddUserGroupMemberRequest is the request struct for api AddUserGroupMember
type AddUserGroupMemberRequest struct {
	*requests.RpcRequest
	ClientToken string `position:"Query" name:"ClientToken"`
	AccessPoint string `position:"Query" name:"AccessPoint"`
	UserIdList  string `position:"Query" name:"UserIdList"`
	UserGroupId string `position:"Query" name:"UserGroupId"`
	SignType    string `position:"Query" name:"SignType"`
}

// AddUserGroupMemberResponse is the response struct for api AddUserGroupMember
type AddUserGroupMemberResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Result    bool   `json:"Result" xml:"Result"`
	Success   bool   `json:"Success" xml:"Success"`
}

// CreateAddUserGroupMemberRequest creates a request to invoke AddUserGroupMember API
func CreateAddUserGroupMemberRequest() (request *AddUserGroupMemberRequest) {
	request = &AddUserGroupMemberRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("quickbi-public", "2020-07-31", "AddUserGroupMember", "quickbi", "openAPI")
	request.Method = requests.POST
	return
}

// CreateAddUserGroupMemberResponse creates a response to parse from AddUserGroupMember response
func CreateAddUserGroupMemberResponse() (response *AddUserGroupMemberResponse) {
	response = &AddUserGroupMemberResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
